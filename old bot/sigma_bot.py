import disnake as discord
from disnake.ext import commands

import random

from asyncio import sleep

from psutil import cpu_percent, virtual_memory

from numexpr import evaluate

from googleapiclient.discovery import build

import base64 as b64

import openai
import craiyon

import gtts
import qrcode

import yt_dlp as ytdlp

import json

import sqlite3

with open("config.json", "r", encoding="utf-8") as cfg:
    config = json.load(cfg)


con = sqlite3.connect("database.db")
curs = con.cursor()

curs.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        balance INTEGER NOT NULL DEFAULT 500,
        level INTEGER NOT NULL DEFAULT 0,
        exp INTEGER NOT NULL DEFAULT 0)
    """)

curs.execute("""CREATE TABLE IF NOT EXISTS shop (
    item_id INTEGER PRIMARY KEY,
    description TEXT NOT NULL,
    price INTEGER NOT NULL)
    """)

con.commit()
con.close()


openai.api_key = config["OpenAI_Key"]

intents = discord.Intents.all()

bot = commands.InteractionBot(intents=intents)

Red = 0xff0000

Green = 0x00ff00

Yellow = 0xffbb00

Blocklist = [999692841498451988]


def get_ai_response(ai_prompt: str):
    with open("gpt_history.txt", "r", encoding="utf-8") as history:
        history_content = history.read()

    if len(history_content) >= 4097:
        with open("gpt_history.txt", "w", encoding="utf-8") as history:
            history.write("")

            return "–ò—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞"

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã Sigma Bot, –±—ã–ª —Å–æ–∑–¥–∞–Ω sionit_1337. –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ –¥–∏—Å–∫–æ—Ä–¥-—Å–µ—Ä–≤–µ—Ä–µ „ÄéŒ£„ÄèSyndicate Sigma –∏ –æ–±—â–∞–µ—à—å—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"},
            {"role": "system", "content": history_content},
            {"role": "user", "content": ai_prompt}
        ],
        n=1,
        max_tokens=999,
        temperature=.7
    )

    with open("gpt_history.txt", "a", encoding="utf-8") as history:
        history.write(f"{ai_prompt} \n{str(response.choices[0].message.content)} \n")

    return str(response.choices[0].message.content)


async def random_ping():
    guild = bot.get_guild(983767050302398514)
    channel = bot.get_channel(1146345841997656064)
    role = guild.get_role(1144206523879411803)

    while True:
        await sleep(random.randint(60, 14400))
        await channel.send(f"{role.mention}")

        print("–ë–æ—Ç –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–∏–Ω–≥")


@bot.event
async def on_ready():
    channel = bot.get_channel(1153915482445991937)

    print(f"{bot.user} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await channel.send(embed=discord.Embed(title="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", color=Green))

    activities = ["Rick Astley - Never Gonna Give You Up", "–∑–∞—Ñ–ª—É–¥–∏ —Å–∏–æ–Ω–∏—Ç—É –∫–æ–Ω—Å–æ–ª—å", "Minecraft", "–¥–æ–≥–æ–Ω–∏ –º–µ–Ω—è –∫–∏—Ä–ø–∏—á", "Bag Generator 3000", "ùìü ùì∏ ùì∑", "–°–æ–≤–µ—Ç –æ—Ç –°–æ–Ω–∏–∫–∞", "404 Not Found"]
    await bot.change_presence(status=discord.Status.online, activity=discord.Activity(type=discord.ActivityType.playing, name=random.choice(activities)))

    bot.loop.create_task(random_ping())


@bot.event
async def on_shutdown():
    channel = bot.get_channel(1153915482445991937)

    print(f"{bot.user} –≤—ã–∫–ª—é—á–µ–Ω!")
    await channel.send(embed=discord.Embed(title="–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!", color=Red))


@bot.event
async def on_member_join(member):
    server = bot.get_guild(983767050302398514)
    channel = server.get_channel(1140674136390254652)

    await channel.send(embed=discord.Embed(title="–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫", description=f"–ö –Ω–∞–º –∑–∞—à–µ–ª {member.mention}! –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π—Ç–µ –µ–≥–æ!", color=Green))


@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    if message.author.id in Blocklist:
        return

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    amnt = random.randint(1, 5)
    user_id = message.author.id

    cursor.execute("SELECT level, exp FROM users WHERE user_id = ?", (user_id,))

    user_data = cursor.fetchone()

    if user_data:
        user_level = user_data[0]
        user_exp = user_data[1]

        randomizator = random.randint(1, 3)
        if randomizator == 3:
            cursor.execute("UPDATE users SET exp = exp + ? WHERE user_id = ?", (amnt, user_id))

        if int(user_exp) >= (int(user_level) * 10):
            cursor.execute("UPDATE users SET level = level + 1 WHERE user_id = ?", (user_id,))
            cursor.execute("UPDATE users SET exp = 0 WHERE user_id = ?", (user_id,))

            lvl_up_channel = bot.get_channel(1140893934202134588)
            await lvl_up_channel.send(embed=discord.Embed(title="–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è", description=f"<@{user_id}> –ø–æ–≤—ã—Å–∏–ª —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ {user_level + 1}!", color=Green))

    conn.commit()
    conn.close()

    if message.content.startswith(f"{bot.user.mention} "):
        content = message.content.removeprefix(f"{bot.user.mention} ")

        response_msg = await message.channel.send(embed=discord.Embed(title="ChatGPT –¥—É–º–∞–µ—Ç...", color=Yellow))

        response = get_ai_response(ai_prompt=content)

        print(f"{len(response)} \n{content} \n{response}")

        if content.lower() == "–æ—á–∏—Å—Ç–∏—Ç—å":
            with open("gpt_history.txt", "w", encoding="utf-8") as history:
                history.write("")

            await response_msg.edit(embed=discord.Embed(title="–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞", color=Yellow))

        else:
            if len(response) < 2000:
                await response_msg.edit(embed=discord.Embed(title="–†–µ–∑—É–ª—å—Ç–∞—Ç:", description=f"{response}", color=Green))

            else:
                with open("response.txt", "w", encoding="utf-8") as file:
                    file.write(response)

                file = discord.File("response.txt", filename="answer.txt")

                await response_msg.edit(embed=discord.Embed(title="–û—à–∏–±–∫–∞", description=f"–û—Ç–≤–µ—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π ({len(response)}/2000), –ø–æ—ç—Ç–æ–º—É —è –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞.", color=Red), file=file)


@bot.slash_command(name="—Ö–æ—Å—Ç", description="–ü–∏—à–µ—Ç —Å—Ç–∞—Ç—ã —Ö–æ—Å—Ç–∞ –±–æ—Ç–∞")
async def host(ctx):
    if ctx.author.id in Blocklist:
        return

    cpu = cpu_percent()

    ram_percent = virtual_memory().percent
    ram_used = round(virtual_memory().used / 1048576)
    ram_total = round(virtual_memory().total / 1048576)

    await ctx.send(embed=discord.Embed(title="–ù–∞–≥—Ä—É–∑–∫–∞ —Ö–æ—Å—Ç–∞",
                                       description=f"–ü–∏–Ω–≥: ``{round(bot.latency * 1000)} –º—Å`` \n–¶–ü: ``{cpu}%`` \n–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: ``{ram_percent}% ({ram_used}/{ram_total} –º–±)``",
                                       color=Yellow))

    print("–ö—Ç–æ-—Ç–æ –ø—Ä–æ–ø–∏—Å–∞–ª /—Ö–æ—Å—Ç")


@bot.slash_command(name="–∏–Ω—Ñ–æ", description="–ü–∏—à–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
async def info(ctx):
    if ctx.author.id in Blocklist:
        return

    guild = bot.get_guild(983767050302398514)
    member_count = guild.member_count

    await ctx.send(embed=discord.Embed(title="–û–±–æ –º–Ω–µ",
                                       description=f"–Ø –±–æ—Ç {bot.owner.display_name} (–∏–ª–∏ {bot.owner.name}), —Å–¥–µ–ª–∞–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ „ÄéŒ£„ÄèSyndicate Sigma –Ω–∞ —è–∑—ã–∫–µ Python, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Disnake. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã \n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {member_count}",
                                       color=Yellow))

    print("–ö—Ç–æ-—Ç–æ –ø—Ä–æ–ø–∏—Å–∞–ª /–∏–Ω—Ñ–æ")


@bot.slash_command(name="—Ä–µ–ø–æ—Ä—Ç", description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª")
async def bug(ctx, –æ–ø–∏—Å–∞–Ω–∏–µ: str, —Å–∫—Ä–∏–Ω_–±–∞–≥–∞: discord.Attachment):
    if ctx.author.id in Blocklist:
        return

    channel = bot.get_channel(1145040647481479261)

    embed = discord.Embed(title="", description=f"{–æ–ø–∏—Å–∞–Ω–∏–µ}", color=Yellow)
    embed.set_author(name=f"{ctx.author}", icon_url=f"{ctx.author.avatar.url}")
    embed.set_image(url=—Å–∫—Ä–∏–Ω_–±–∞–≥–∞.url)

    await ctx.send(embed=discord.Embed(title="–£—Å–ø–µ—à–Ω–æ", description="–ë–∞–≥ —Ä–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", color=Green))
    await channel.send(embed=embed)

    print(f"–ó–∞—Ä–µ–ø–æ—Ä—Ç–∏–ª–∏ –±–∞–≥ \n–û–ø–∏—Å–∞–Ω–∏–µ: {–æ–ø–∏—Å–∞–Ω–∏–µ} \nURL —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {—Å–∫—Ä–∏–Ω_–±–∞–≥–∞.url}")


@bot.slash_command(name="—Å–ø—Ä–æ—Å–∏—Ç—å", description="–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å \"–¥–∞\", \"–Ω–µ—Ç\" –∏–ª–∏ –¥—Ä—É–≥–æ–µ")
async def ask(ctx, –≤–æ–ø—Ä–æ—Å: str):
    if ctx.author.id in Blocklist:
        return

    answers = ["–î–∞", "–ù–µ—Ç", "–ù–ò –í –ö–û–ï–ú –°–õ–£–ß–ê–ï!!!!!", "–ö–û–ù–ï–ß–ù–û –ñ–ï –î–ê!!!!!!!!!", "–ù–µ —É–≤–µ—Ä–µ–Ω", "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç",
               "–í–æ–∑–º–æ–∂–Ω–æ", "–°–ø—Ä–æ—Å–∏ —É –ú—ã—à–∫–∏", "–°–ø—Ä–æ—Å–∏ —É ChatGPT", "–ú–Ω–µ –ª–µ–Ω—å, –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏ –µ—â–µ —Ä–∞–∑"]

    answer = random.choice(answers)

    await ctx.send(
        embed=discord.Embed(title="–°–ø—Ä–æ—Å–∏–ª–∏", description=f"–í–æ–ø—Ä–æ—Å: ``{–≤–æ–ø—Ä–æ—Å}`` \n–û—Ç–≤–µ—Ç: ``{answer}``", color=Green))

    print(f"–°–ø—Ä–æ—Å–∏–ª–∏ \n–í–æ–ø—Ä–æ—Å: {–≤–æ–ø—Ä–æ—Å} \n–û—Ç–≤–µ—Ç: {answer}")


@bot.slash_command(name="–∫–∞–Ω–æ–±—É", description="–ò–≥—Ä–∞ \"–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞\"")
async def kanobu(ctx, –≤—ã–±–æ—Ä: str = commands.Param(choices=["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"])):
    if ctx.author.id in Blocklist:
        return

    bot_choices = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]

    bot_choice = random.choice(bot_choices)

    if –≤—ã–±–æ—Ä.lower() == bot_choice.lower():
        await ctx.send(
            embed=discord.Embed(title="–ù–∏—á—å—è!", description=f"–Ø –≤—ã–±—Ä–∞–ª ``{bot_choice}`` \n–í—ã –≤—ã–±—Ä–∞–ª–∏ ``{–≤—ã–±–æ—Ä}``",
                                color=Yellow))

    elif ((–≤—ã–±–æ—Ä.lower() == "–±—É–º–∞–≥–∞" and bot_choice.lower() == "–∫–∞–º–µ–Ω—å") or (
            –≤—ã–±–æ—Ä.lower() == "–Ω–æ–∂–Ω–∏—Ü—ã" and bot_choice.lower() == "–±—É–º–∞–≥–∞") or (
                  –≤—ã–±–æ—Ä.lower() == "–∫–∞–º–µ–Ω—å" and bot_choice.lower() == "–Ω–æ–∂–Ω–∏—Ü—ã")):
        await ctx.send(
            embed=discord.Embed(title="–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", description=f"–Ø –≤—ã–±—Ä–∞–ª ``{bot_choice}`` \n–í—ã –≤—ã–±—Ä–∞–ª–∏ ``{–≤—ã–±–æ—Ä}``",
                                color=Green))

    else:
        await ctx.send(embed=discord.Embed(title="–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!",
                                           description=f"–Ø –≤—ã–±—Ä–∞–ª ``{bot_choice}`` \n–í—ã –≤—ã–±—Ä–∞–ª–∏ ``{–≤—ã–±–æ—Ä}``",
                                           color=Red))

    print(f"–ë–æ—Ç —Å—ã–≥—Ä–∞–ª –≤ –ö–∞–ù–æ–ë—É \n–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª {–≤—ã–±–æ—Ä}, –±–æ—Ç –≤—ã–±—Ä–∞–ª {bot_choice}")


@bot.slash_command(name="–≤—ã–±–æ—Ä", description="–í—ã–±–∏—Ä–∞–µ—Ç –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
async def choice(ctx, –≤–∞—Ä–∏–∞–Ω—Ç_1, –≤–∞—Ä–∏–∞–Ω—Ç_2):
    if ctx.author.id in Blocklist:
        return

    final_choice = random.randint(1, 3)

    if final_choice == 1:
        await ctx.send(
            embed=discord.Embed(title="–í—ã–±–∏—Ä–∞—é –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", description=f"–í–∞—Ä–∏–∞–Ω—Ç: ``{–≤–∞—Ä–∏–∞–Ω—Ç_1}``", color=Green))

    elif final_choice == 2:
        await ctx.send(
            embed=discord.Embed(title="–í—ã–±–∏—Ä–∞—é –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", description=f"–í–∞—Ä–∏–∞–Ω—Ç: ``{–≤–∞—Ä–∏–∞–Ω—Ç_2}``", color=Red))

    else:
        await ctx.send(embed=discord.Embed(title="–¢—É—Ç –±–µ–∑ –ø–æ–Ω—è—Ç–∏—è, –≤—ã–±–∏—Ä–∞–π –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏", color=Yellow))

    print(f"–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {final_choice}")


@bot.slash_command(name="—Ä—É–ª–µ—Ç–∫–∞", description="–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞")
async def roulette(ctx, –ø—É–ª–∏: int):
    if ctx.author.id in Blocklist:
        return

    chance = random.randint(1, 6)

    if –ø—É–ª–∏ > 6 or –ø—É–ª–∏ <= 0:
        await ctx.send(embed=discord.Embed(title="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–ª—å!", color=Yellow))

    else:
        if chance < –ø—É–ª–∏:
            await ctx.send(embed=discord.Embed(title="–ü–∏—Å—Ç–æ–ª–µ—Ç –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –∏ –≤—ã —É–º–µ—Ä–ª–∏",
                                               description=f"–ü—É–ª—å –±—ã–ª–æ –∑–∞—Ä—è–∂–µ–Ω–æ: ``{–ø—É–ª–∏}``", color=Red))

        else:
            await ctx.send(embed=discord.Embed(title="–í—ã—Å—Ç—Ä–µ–ª–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏ –≤—ã –≤—ã–∂–∏–ª–∏!",
                                               description=f"–ü—É–ª—å –±—ã–ª–æ –∑–∞—Ä—è–∂–µ–Ω–æ: ``{–ø—É–ª–∏}``", color=Green))

    print(f"–ë–æ—Ç —Å—ã–≥—Ä–∞–ª –≤ —Ä—É–ª–µ—Ç–∫—É, –ø—É–ª—å –±—ã–ª–æ {–ø—É–ª–∏}, —à–∞–Ω—Å {chance} –∏–∑ {–ø—É–ª–∏}")


@bot.slash_command(name="–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", description="–í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä")
async def calc(ctx, –ø—Ä–∏–º–µ—Ä):
    if ctx.author.id in Blocklist:
        return

    result = evaluate(–ø—Ä–∏–º–µ—Ä)

    await ctx.send(embed=discord.Embed(title=f"–†–µ–∑—É–ª—å—Ç–∞—Ç: ``{result}``", color=Yellow))

    print(f"–ë–æ—Ç –≤—ã—á–∏—Å–ª–∏–ª –ø—Ä–∏–º–µ—Ä –∏ –ø–æ–ª—É—á–∏–ª {result}")


@bot.slash_command(name="–∞–≤–∞—Ç–∞—Ä–∫–∞", description="–ü–æ–ª—É—á–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def avatar(ctx, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member):
    if ctx.author.id in Blocklist:
        return

    embed = discord.Embed(title=f"–ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.display_name}", color=Yellow)
    embed.set_image(url=–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.avatar.url)

    await ctx.send(embed=embed)

    print(f"–ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.display_name}: {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.avatar.url}")


@bot.slash_command(name="–≥—É–≥–ª-–∫–∞—Ä—Ç–∏–Ω–∫–∞", description="–ü—Ä–∏—Å—ã–ª–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ Google")
async def googlimage(ctx, –∑–∞–ø—Ä–æ—Å: str):
    if ctx.author.id in Blocklist:
        return

    await ctx.send(embed=discord.Embed(title=f"–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É ``{–∑–∞–ø—Ä–æ—Å}``...", color=Yellow))

    resource = build("customsearch", "v1", developerKey=config["Google_CS_Key"]).cse()
    result = resource.list(q=f"{–∑–∞–ø—Ä–æ—Å}", cx=config["Google_PS_Key"], searchType="image", safe="active").execute()
    ran = random.randint(0, (len(result["items"]) - 1))

    if "items" in result and len(result["items"]) > 0:
        final_url = result["items"][ran]["link"]

        embed = discord.Embed(title=f"{–∑–∞–ø—Ä–æ—Å}", description=final_url, url=final_url, color=Green)
        embed.set_image(url=final_url)

        await ctx.send(embed=embed)

    else:
        await ctx.send(embed=discord.Embed(title="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.", color=Red))

    print(f"–ë–æ—Ç –Ω–∞—à–µ–ª {final_url} –ø–æ –∑–∞–ø—Ä–æ—Å—É {–∑–∞–ø—Ä–æ—Å}")


@bot.slash_command(name="–≥—É–≥–ª-—Å—Å—ã–ª–∫–∞", description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ Google")
async def googlink(ctx, –∑–∞–ø—Ä–æ—Å: str):
    if ctx.author.id in Blocklist:
        return

    await ctx.send(embed=discord.Embed(title=f"–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É ``{–∑–∞–ø—Ä–æ—Å}``...", color=Yellow))

    resource = build("customsearch", "v1", developerKey=config["Google_cS_Key"]).cse()
    result = resource.list(q=f"{–∑–∞–ø—Ä–æ—Å}", cx=config["Google_PS_Key"], searchType="searchTypeUndefined",
                           safe="active").execute()
    ran = random.randint(0, (len(result["items"]) - 1))

    if "items" in result and len(result["items"]) > 0:
        final_url = result["items"][ran]["link"]

        embed = discord.Embed(title=f"{–∑–∞–ø—Ä–æ—Å}", description=final_url, url=final_url, color=Green)

        await ctx.send(embed=embed)

    else:
        await ctx.send(embed=discord.Embed(title="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.", color=Red))

    print(f"–ë–æ—Ç –Ω–∞—à–µ–ª {final_url} –ø–æ –∑–∞–ø—Ä–æ—Å—É {–∑–∞–ø—Ä–æ—Å}")


@bot.slash_command(name="—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", description="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É")
async def genimage(ctx, –∑–∞–ø—Ä–æ—Å: str):
    if ctx.author.id in Blocklist:
        return

    generator = craiyon.Craiyon()

    await ctx.send(embed=discord.Embed(title=f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É ``{–∑–∞–ø—Ä–æ—Å}``...", color=Yellow))

    result = await generator.async_generate(prompt=–∑–∞–ø—Ä–æ—Å)
    final_image = random.choice(result.images)

    embed = discord.Embed(title=f"{–∑–∞–ø—Ä–æ—Å}")
    embed.set_image(url=final_image)

    await ctx.send(embed=embed)

    print(f"–ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {final_image}")


@bot.slash_command(name="base64", description="–†–∞–±–æ—Ç–∞–µ—Ç —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π Base64")
async def base64(ctx, –≤–≤–æ–¥: str, —Ç–∏–ø: str = commands.Param(choices=["–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å", "–∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å"])):
    if ctx.author.id in Blocklist:
        return

    if —Ç–∏–ø == "–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å":
        decoded_bytes = b64.b64decode(–≤–≤–æ–¥.encode("utf-8"))
        decoded_text = decoded_bytes.decode("utf-8")

        await ctx.send(embed=discord.Embed(title=f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ``{decoded_text}``", color=Yellow))

        print(–≤–≤–æ–¥, decoded_text)

    elif —Ç–∏–ø == "–∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å":
        encoded_bytes = b64.b64encode(–≤–≤–æ–¥.encode("utf-8"))
        encoded_text = encoded_bytes.decode("utf-8")

        await ctx.send(embed=discord.Embed(title=f"–ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ``{encoded_text}``", color=Yellow))

        print(–≤–≤–æ–¥, encoded_text)


@bot.slash_command(name="–æ–∑–≤—É—á–∏—Ç—å", description="–û–∑–≤—É—á–∏–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
async def tts(ctx, —Ç–µ–∫—Å—Ç: str):
    if ctx.author.id in Blocklist:
        return

    await ctx.send(embed=discord.Embed(title="–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–∑–≤—É—á–∫–∞...", color=Yellow))

    voice = gtts.gTTS(—Ç–µ–∫—Å—Ç, lang="ru")
    voice.save("voice_message.ogg")

    await ctx.send(file=discord.File("voice_message.ogg"))

    print(f"–ë–æ—Ç –æ–∑–≤—É—á–∏–ª —Ç–µ–∫—Å—Ç \n–¢–µ–∫—Å—Ç: \n{—Ç–µ–∫—Å—Ç}")


@bot.slash_command(name="qr-–∫–æ–¥", description="–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –≤ QR-–∫–æ–¥")
async def qr(ctx, —Ç–µ–∫—Å—Ç: str):
    if ctx.author.id in Blocklist:
        return

    await ctx.send(embed=discord.Embed(title="–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞...", color=Yellow))

    img = qrcode.make(—Ç–µ–∫—Å—Ç)
    img.save("qrcode.png")
    final_qr_code = discord.File("qrcode.png")

    embed = discord.Embed(title="–ì–æ—Ç–æ–≤–æ", description=f"{—Ç–µ–∫—Å—Ç}", color=Green)
    embed.set_image(file=final_qr_code)

    await ctx.send(embed=embed)

    print(f"–ë–æ—Ç —Å–¥–µ–ª–∞–ª QR-–∫–æ–¥ \n–¢–µ–∫—Å—Ç: {—Ç–µ–∫—Å—Ç}")


@bot.slash_command()
async def execute(ctx, command: str):
    if ctx.author != bot.owner:
        return

    try:
        await eval(command)

    except Exception as e:
        await ctx.send(embed=discord.Embed(title="–û—à–∏–±–∫–∞!", description=f"``{e}``", color=Red))


# –ú—É–∑—ã–∫–∞
@bot.slash_command(name="–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å", description="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç –±–æ—Ç–∞ –∫ –≤–∞—à–µ–º—É –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É")
async def join(ctx):
    if ctx.author.id in Blocklist:
        return

    channel = ctx.author.voice.channel
    voice = discord.utils.get(bot.voice_clients, guild=ctx.guild)

    if voice and voice.is_connected():
        voice.move_to(channel)

        await ctx.send(embed=discord.Embed(title="–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", color=Green))

    elif voice == channel:
        await ctx.send(embed=discord.Embed(title="–ë–æ—Ç —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!", color=Yellow))

    else:
        voice = await channel.connect()

        await ctx.send(embed=discord.Embed(title="–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", color=Green))

        print(f"–ë–æ—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏ –∫ –∫–∞–Ω–∞–ª—É {voice}")


@bot.slash_command(name="–∏–≥—Ä–∞—Ç—å", description="–ò–≥—Ä–∞–µ—Ç –º—É–∑—ã–∫—É (—Å—Å—ã–ª–∫–∞)")
async def play(ctx, —Å—Å—ã–ª–∫–∞: str):
    if ctx.author.id in Blocklist:
        return

    YDL_OPTIONS = {"format": "bestaudio", "noplaylist": "True"}
    FFMPEG_OPTIONS = {"before_options": "-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5", "options": "-vn"}

    voice = discord.utils.get(bot.voice_clients, guild=ctx.guild)
    channel = ctx.author.voice.channel

    if not voice:
        voice = await channel.connect()

    elif voice and voice.is_connected():
        voice.move_to(channel)

    if voice and not voice.is_playing():
        await ctx.send(embed=discord.Embed(title="–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ...", color=Yellow))
        try:
            with ytdlp.YoutubeDL(YDL_OPTIONS) as ydl:
                INFO = ydl.extract_info(—Å—Å—ã–ª–∫–∞, download=False)

            URL = INFO["url"]
            voice.play(discord.FFmpegPCMAudio(URL, **FFMPEG_OPTIONS))
            voice.is_playing()

            await ctx.send(
                embed=discord.Embed(title="–ì–æ—Ç–æ–≤–æ!", description=f"–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: [–ü–µ—Å–Ω—è]({—Å—Å—ã–ª–∫–∞})", color=Green))

        except Exception as e:
            await ctx.send(embed=discord.Embed(title="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!", description=f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: ``{e}``"))

        print(f"–ë–æ—Ç –Ω–∞—á–∞–ª –∏–≥—Ä–∞—Ç—å {—Å—Å—ã–ª–∫–∞}")


@bot.slash_command(name="—Å–∫–∏–ø", description="–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É")
async def skip(ctx):
    if ctx.author.id in Blocklist:
        return

    voice = discord.utils.get(bot.voice_clients, guild=ctx.guild)

    if voice and voice.is_playing():
        voice.stop()

        await ctx.send(embed=discord.Embed(title="–¢–µ–∫—É—â–∞—è –º—É–∑—ã–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞!", color=Green))

    else:
        await ctx.send(embed=discord.Embed(title="–ë–æ—Ç –Ω–µ –∏–≥—Ä–∞–µ—Ç –º—É–∑—ã–∫—É –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç!", color=Yellow))

    print("–ë–æ—Ç —Å–∫–∏–ø–Ω—É–ª –º—É–∑—ã–∫—É")


@bot.slash_command(name="–ø–∞—É–∑–∞", description="–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É")
async def pause(ctx):
    if ctx.author.id in Blocklist:
        return

    voice = discord.utils.get(bot.voice_clients, guild=ctx.guild)

    if voice and voice.is_playing():
        voice.pause()

        await ctx.send(embed=discord.Embed(title="–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ!", color=Green))

    else:
        await ctx.send(embed=discord.Embed(title="–ë–æ—Ç –Ω–µ –∏–≥—Ä–∞–µ—Ç –º—É–∑—ã–∫—É –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç!", color=Yellow))

    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ")


@bot.slash_command(name="—Å—Ç–æ–ø", description="–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É –∏ –∫–∏–∫–∞–µ—Ç –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞")
async def stop(ctx):
    if ctx.author.id in Blocklist:
        return

    voice = discord.utils.get(bot.voice_clients, guild=ctx.guild)

    if voice and voice.is_connected():
        voice.pause()
        await voice.disconnect()

        await ctx.send(embed=discord.Embed(title="–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞!", color=Green))

    else:
        await ctx.send(embed=discord.Embed(title="–ë–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç!", color=Yellow))

    print("–ë–æ—Ç –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")


@bot.slash_command(name="—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", description="–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞—Å –≤ –î–ë —Å —ç–∫–æ–Ω–æ–º–∏–∫–æ–π –∏ —É—Ä–æ–≤–Ω—è–º–∏")
async def reg(ctx):
    if ctx.author.id in Blocklist:
        return

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (ctx.author.id,))
    existing_user = cursor.fetchone()

    if existing_user:
        await ctx.send(embed=discord.Embed(title="–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –î–ë!", color=Red))

    else:
        cursor.execute("INSERT INTO users (user_id, balance, level, exp) VALUES (?, 500, 0, 0)", (ctx.author.id,))
        conn.commit()

        await ctx.send(embed=discord.Embed(title="–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –î–ë!", description="–í–∞—à –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å - 500<:coin:1165638500528443546>", color=Green))


@bot.slash_command(name="—Ä–∞–±–æ—Ç–∞", description="–°–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥")
@commands.cooldown(1, 3600, commands.BucketType.user)
async def work(ctx):
    if ctx.author.id in Blocklist:
        return

    user_id = ctx.author.id
    amnt = random.randint(50, 250)

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amnt, user_id))
    conn.commit()
    conn.close()

    await ctx.send(embed=discord.Embed(title=f"–í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ {amnt}<:coin:1165638500528443546>!", color=Green))


@bot.slash_command(name="–ø—Ä–æ—Ñ–∏–ª—å", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def profile(ctx, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member = None):
    if ctx.author.id in Blocklist:
        return

    if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å is None:
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = ctx.author

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id,))
    existing_user = cursor.fetchone()

    if existing_user:
        cursor.execute("SELECT balance, level, exp FROM users WHERE user_id = ?", (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id,))
        user_info = cursor.fetchone()
        user_balance = user_info[0]
        user_level = user_info[1]
        user_exp = user_info[2]

        conn.close()

        if user_info:
            await ctx.send(embed=discord.Embed(title=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.name}", description=f"–ë–∞–ª–∞–Ω—Å: {user_balance}<:coin:1165638500528443546> \n–£—Ä–æ–≤–µ–Ω—å: {user_level} \n–û–ø—ã—Ç: {user_exp}/{user_level * 10}", color=Yellow))

    else:
        await ctx.send(embed=discord.Embed(title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –î–ë!", color=Red))


@bot.slash_command(name="–ø–µ—Ä–µ–¥–∞—Ç—å", description="–ü–µ—Ä–µ–¥–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–µ–Ω—å–≥–∏")
async def transfer(ctx, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int):
    if ctx.author.id in Blocklist:
        return

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (ctx.author.id,))
    user_info = cursor.fetchone()
    user_balance = user_info[0]

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id,))
    existing_user = cursor.fetchone()

    if existing_user:
        if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <= user_balance:
            cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id))
            cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, ctx.author.id))

            await ctx.send(embed=discord.Embed(title=f"–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.name} {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}<:coin:1165638500528443546>", color=Green))

        else:
            await ctx.send(embed=discord.Embed(title="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ <:coin:1165638500528443546> –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!", color=Red))

    else:
        await ctx.send(embed=discord.Embed(title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –î–ë!", color=Red))

    conn.commit()
    conn.close()

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ctx.author.name} –ø–µ—Ä–µ–∫–∏–Ω—É–ª {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.name} {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ} –º–æ–Ω–µ—Ç")


password = input("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞? (y/n) \n>>> ")

if password.lower() == "y":
    print("–ü—Ä–∏–Ω—è—Ç–æ, –∑–∞–ø—É—Å–∫–∞—é...")

    bot.run(config["Token"])

else:
    print("–ü—Ä–∏–Ω—è—Ç–æ, –æ—Ç–∫–∞—Ç")